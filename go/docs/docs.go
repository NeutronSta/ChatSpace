// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/relationship/add_friend": {
            "post": {
                "description": "request to add a new friend",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relationship"
                ],
                "summary": "AddFriend",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication token",
                        "name": "Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Friend_id",
                        "name": "Friend_id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "request send successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Request failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/relationship/friend_list": {
            "get": {
                "description": "return all your friend and their information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relationship"
                ],
                "summary": "Get FriendList",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication token",
                        "name": "Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get FriendList List successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "unexpect Authorization",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/relationship/friend_request_list": {
            "get": {
                "description": "Provide every name of user request to be your friend",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relationship"
                ],
                "summary": "Get friend request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication token",
                        "name": "Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get Request List successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "unexpect Authorization",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/relationship/verify": {
            "post": {
                "description": "agree your friend request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relationship"
                ],
                "summary": "Verify request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication token",
                        "name": "Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Friend_id",
                        "name": "Friend_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Verify",
                        "name": "Verify(true/false)",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Record updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to update record",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/upload_files": {
            "post": {
                "description": "upload files in all types",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "message"
                ],
                "summary": "upload files",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Type of the file",
                        "name": "type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "id: User ID, message: Upload status message, path: URL to the uploaded file",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: Failed to create directory",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Error message for internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user/avatar": {
            "post": {
                "description": "upload user avatar in png form",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Change user avatar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication token",
                        "name": "Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "picture",
                        "name": "avatar",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update avatar successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Update avatar failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "User login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Please enter password",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/my_info": {
            "get": {
                "description": "Provide current user's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get my_info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication token",
                        "name": "Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "unexpect Authorization",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "register user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "User already exists",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/update_password": {
            "post": {
                "description": "Endpoint to change user password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication token",
                        "name": "Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Old password",
                        "name": "old_password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New password",
                        "name": "new_password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Unknown error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/update_username": {
            "post": {
                "description": "Endpoint to change username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Change user username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication token",
                        "name": "Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "new_name",
                        "name": "new_name",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Username updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to update username",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
